//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Spike.Providers.WCF.Proxy.SecurityProviderService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Spike.Providers", ConfigurationName="SecurityProviderService.SecurityProviderService")]
    public interface SecurityProviderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Spike.Providers/SecurityProviderService/RegisterUser", ReplyAction="Spike.Providers/SecurityProviderService/RegisterUserResponse")]
        Spike.Contracts.Security.ApplicationUser RegisterUser(Spike.Contracts.Security.ApplicationUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Spike.Providers/SecurityProviderService/RegisterUser", ReplyAction="Spike.Providers/SecurityProviderService/RegisterUserResponse")]
        System.Threading.Tasks.Task<Spike.Contracts.Security.ApplicationUser> RegisterUserAsync(Spike.Contracts.Security.ApplicationUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="Spike.Providers/SecurityProviderService/DeleteUser", ReplyAction="Spike.Providers/SecurityProviderService/DeleteUserResponse")]
        Spike.Contracts.Security.ApplicationUser DeleteUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="Spike.Providers/SecurityProviderService/DeleteUser", ReplyAction="Spike.Providers/SecurityProviderService/DeleteUserResponse")]
        System.Threading.Tasks.Task<Spike.Contracts.Security.ApplicationUser> DeleteUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="Spike.Providers/SecurityProviderService/GetUser", ReplyAction="Spike.Providers/SecurityProviderService/GetUserResponse")]
        Spike.Contracts.Security.ApplicationUser GetUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="Spike.Providers/SecurityProviderService/GetUser", ReplyAction="Spike.Providers/SecurityProviderService/GetUserResponse")]
        System.Threading.Tasks.Task<Spike.Contracts.Security.ApplicationUser> GetUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="Spike.Providers/SecurityProviderService/GetUserClaims", ReplyAction="Spike.Providers/SecurityProviderService/GetUserClaimsResponse")]
        System.Security.Claims.Claim[] GetUserClaims(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="Spike.Providers/SecurityProviderService/GetUserClaims", ReplyAction="Spike.Providers/SecurityProviderService/GetUserClaimsResponse")]
        System.Threading.Tasks.Task<System.Security.Claims.Claim[]> GetUserClaimsAsync(int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface SecurityProviderServiceChannel : Spike.Providers.WCF.Proxy.SecurityProviderService.SecurityProviderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SecurityProviderServiceClient : System.ServiceModel.ClientBase<Spike.Providers.WCF.Proxy.SecurityProviderService.SecurityProviderService>, Spike.Providers.WCF.Proxy.SecurityProviderService.SecurityProviderService {
        
        public SecurityProviderServiceClient() {
        }
        
        public SecurityProviderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SecurityProviderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SecurityProviderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SecurityProviderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Spike.Contracts.Security.ApplicationUser RegisterUser(Spike.Contracts.Security.ApplicationUser user) {
            return base.Channel.RegisterUser(user);
        }
        
        public System.Threading.Tasks.Task<Spike.Contracts.Security.ApplicationUser> RegisterUserAsync(Spike.Contracts.Security.ApplicationUser user) {
            return base.Channel.RegisterUserAsync(user);
        }
        
        public Spike.Contracts.Security.ApplicationUser DeleteUser(int id) {
            return base.Channel.DeleteUser(id);
        }
        
        public System.Threading.Tasks.Task<Spike.Contracts.Security.ApplicationUser> DeleteUserAsync(int id) {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public Spike.Contracts.Security.ApplicationUser GetUser(int id) {
            return base.Channel.GetUser(id);
        }
        
        public System.Threading.Tasks.Task<Spike.Contracts.Security.ApplicationUser> GetUserAsync(int id) {
            return base.Channel.GetUserAsync(id);
        }
        
        public System.Security.Claims.Claim[] GetUserClaims(int userId) {
            return base.Channel.GetUserClaims(userId);
        }
        
        public System.Threading.Tasks.Task<System.Security.Claims.Claim[]> GetUserClaimsAsync(int userId) {
            return base.Channel.GetUserClaimsAsync(userId);
        }
    }
}
